<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>记一次Hexo主题搜索功能的改造</title>
      <link href="/2018/08/12/%E8%AE%B0%E4%B8%80%E6%AC%A1Hexo%E4%B8%BB%E9%A2%98%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E7%9A%84%E6%94%B9%E9%80%A0/"/>
      <url>/2018/08/12/%E8%AE%B0%E4%B8%80%E6%AC%A1Hexo%E4%B8%BB%E9%A2%98%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E7%9A%84%E6%94%B9%E9%80%A0/</url>
      <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/GitHubJiKe/pictures/master/images/20180812142559.png" alt=""></p><p><a href="https://probberechts.github.io/hexo-theme-cactus/" target="_blank" rel="noopener">Demo页</a></p><hr><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>根据Hexo往常一样的使用主题的方式一样，将喜欢的主题<strong>git clone</strong>到博客目录下的<strong>theme</strong>下，</p><h2 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h2><p>修改根目录下的<strong>_config.yml</strong>文件：</p><p><img src="https://raw.githubusercontent.com/GitHubJiKe/pictures/master/images/20180812143022.png" alt=""></p><h2 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g 生成html</span><br><span class="line"></span><br><span class="line">hexo s 本地预览</span><br><span class="line"></span><br><span class="line">hexo d 发布上线</span><br></pre></td></tr></table></figure><h2 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h2><p>我发现，根据官方的配置：</p><p><img src="https://raw.githubusercontent.com/GitHubJiKe/pictures/master/images/20180812143444.png" alt=""></p><p>搜索区域可以出现，但是功能无法使用。</p><h2 id="接着"><a href="#接着" class="headerlink" title="接着"></a>接着</h2><p>我在<strong>github</strong>提了<strong>issue</strong>，本想着等待作者的回复，但是作为一个前端开发的我，怎么可能就这么轻易地放弃呢。随后我查看了一些历史<strong>issues</strong>，发现了作者回答过的历史问题里别人遇到过同样的问题：</p><p><img src="https://raw.githubusercontent.com/GitHubJiKe/pictures/master/images/20180812144315.png" alt=""></p><h2 id="随后"><a href="#随后" class="headerlink" title="随后"></a>随后</h2><p>我就在本地的代码里寻找<strong>search.js</strong>文件，找到之后我查看了里面的逻辑，在关键位置添加了<strong>console.log</strong>，用于查看日志信息，结果发现：</p><p><img src="https://raw.githubusercontent.com/GitHubJiKe/pictures/master/images/20180812144637.png" alt=""></p><p>这里的解析代码和生成的<strong>search.xml</strong>并不对应：</p><p><img src="https://raw.githubusercontent.com/GitHubJiKe/pictures/master/images/20180812144724.png" alt=""></p><p>所以我改造了这里的解析代码：</p><p><img src="https://raw.githubusercontent.com/GitHubJiKe/pictures/master/images/20180812144935.png" alt=""></p><p>这里使用了<strong>decodeURIComponent</strong>是因为从<strong>search.xml</strong>里的内容可以看出，<strong>url</strong>并不是明文，需要<strong>decode</strong>一下。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>搜索功能完美的可用了。</p><h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><p>我并不喜欢这种响应式的搜索过程，随着输入内容出现搜索结果的方式虽然很及时，也很方便，但是并不是我想要的效果，我想要的是通过敲击回车键才进行搜索。</p><h2 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h2><p>我又对源码进行了一番改造，将作者的代码进行了小小的封装，并对搜索框的<strong>keyup</strong>事件进行了监听，判断<strong>keycode</strong> <strong>=== 13</strong>(回车键的<strong>code</strong>值)的时候才执行<strong>search</strong>。</p><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>实现的效果才是我最中意的。</p><p>希望这篇文章有帮助到你，感谢您的阅读。</p>]]></content>
      
      
        <tags>
            
            <tag> Hexo Theme </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Test</title>
      <link href="/2018/08/12/2018-08-12/"/>
      <url>/2018/08/12/2018-08-12/</url>
      <content type="html"><![CDATA[<p>how to fix <strong>hexo d</strong> error, please read this article:</p><p><a href="https://blog.csdn.net/Greenovia/article/details/60576985" target="_blank" rel="noopener">解决用Hexo和GitHub搭建博客时hexo d命令报错问题</a></p>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>激励自我</title>
      <link href="/2018/08/12/%E6%BF%80%E5%8A%B1%E8%87%AA%E6%88%91/"/>
      <url>/2018/08/12/%E6%BF%80%E5%8A%B1%E8%87%AA%E6%88%91/</url>
      <content type="html"><![CDATA[<ul><li><p>凡事预则立不预则废</p></li><li><p>先发制人、主动出击；最好的防御就是进攻</p></li><li><p>能力越大、责任越大</p></li></ul><p>  最近猛然间发现，原来这两年的工作经验真的让自己成长不少。 再次和以前带我入门前端开发的前辈同team工作了，这让我也感觉很开心。 更让我觉得惊讶的是，无形中，原来我已经可以做这么多事情了，原来经验的增长是这样一个反馈结果。 写出来，总结一下，既是对自己这两年多来的成长的复盘总结，也算是对自己的一个认可。</p><p>   快速的熟悉工作方式和流程，快速的了解业务基本信息，事先对使用的技术栈进行一定的了解和使用。 这是我对自己这次换组工作最为直观的感受，我并没有和前一位小伙伴做任何工作交接的工作，当然是因为时间不允许，并不是我无意做这件事情。在一天之内熟悉了【码云】的使用流程和新的工程指定编码规范，这也得益于我提前就准备好了【码云】账号，更是早早的就自己做了小程序开发相关的学习和调研，所以才在融入这个新的团队的时候不会感到很生硬。 </p><p>  由此可见，凡事做足充分的准备会让事情变得相对容易和轻松。希望自己保持这个良好的习惯，坚持给自己设计划，定目标，并为自己想要做的事情做好事先准备。 还有就是，主动性，我不喜欢等待分配事情去做，更喜欢根据自己的分析和理解，主动地提出安排工作内容到手上，甚至有些事情我会不动声色的做掉，只在最后回报的时候说一声，我做了这件事情，并且会讲出我是出于某种考虑，采用了什么技术策略。</p><p>  比如这次开发过程中，我提出的一些优化的点，还有默默做的一些视图的优化和组件的封装，这不仅仅是我对技术的热爱，更是出于对后续开发过程的把握，我深知，这些事情早做要比晚做好，而且我主动做要比等着分配给我说让我做要好。 积极主动的人运气从来不会太差。我想这次CTO能够破格给我提薪挽留我的原因大概也和我工作积极主动，而且求知欲强烈，希望有所成就有关吧。希望自己能保持这种冲劲，不满足于现状，不满足于自己的高度，永远保持这种积极主动的活跃精神和态度，对待生活，对待工作。</p><p>  比如公司这次做的产品，我已开始并不了解，但是我主动的找到相关人员索要一些资料和文档先自行的阅读一遍，这样自己也有一个大体的了解，不至于在后续的会议中谈及某一点的时候不知道发生了什么。作为一个技术人员，了解业务是必须的，有些开发者认为只要写好代码就行了，让我实现什么功能我实现了就好了。我觉得这不是一个好的态度。</p><p>  软件开发的路径有千千万万种，作为一个好的开发者，应该能在这千千万万种之中发掘出相对比较优良的方式来实现功能，而且能够从用户的角度出发来考量某些设计做的是不是合适和易用。 这也是我想要让自己保持的一点，就是不要把自己的角色局限于前端开发工程师上。我可以做的事情很多，提出某些技术的解决方案和优化措施，以及代码的优化和架构，除了这些我分内的事情，我还可以以我的经验和观点，为产品的设计提出一些优化的方案，甚至可以和产品经理提出一些不合理的设计应该用怎样的方式去替代…… 等等这些点，帮助我实现了从一个默默无名的小程序猿，走到了现在破格提薪，加入产品组的结果。</p><p>  当然这一切都还不是我的最终目的，我也并没有为自己所取得这些成绩沾沾自喜，我想提醒自己，我还有很长的路要走，还有很多的领域需要去了解，还有很广阔的空间等着我去开拓，希望我能一如既往的保持这个劲头，成就不一样的自己。 </p>]]></content>
      
      
        <tags>
            
            <tag> 周末写写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Say something</title>
      <link href="/2018/06/25/english/"/>
      <url>/2018/06/25/english/</url>
      <content type="html"><![CDATA[<p>Sometimes I don’t want to do anything, and sometimes I have a lot of ambitions, even to conquer the world. </p><p>To some extent, I am not really like what I am doing.But it’s hard to make changes, it costs lot. I always think about to go another city and have another life, but I always give up without moving one step.</p><p>I always tell myself, I am different with others.I am the unique one! I can do anything I waht to, if I try hard!</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CSS-知识点</title>
      <link href="/2018/06/25/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2018/06/25/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="before-amp-amp-after-选择器"><a href="#before-amp-amp-after-选择器" class="headerlink" title="before &amp;&amp; after 选择器"></a>before &amp;&amp; after 选择器</h1><style>    #box1 p{        font-size:15pt;    }    #box1 p:before{        content:"Before Content";        color:yellow;        background-color:red;        padding:10px;        font-size: 20pt    }    #box1 p:after{        content:"After Content";        color:blue;        background-color:red;        padding:10px;    }</style><div id="box1"><br>    <p>middle content1</p><br>    <p>middle content2</p><br>    <p>middle content3</p><br></div><p><strong>before实在元素的前面添加content内容，<br>可以是字符串，url(音频，图片，media)，<br>after实在元素的后面添加这些内容</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//上图代码展示</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#box1 p&#123;</span></span><br><span class="line"><span class="undefined">font-size:15pt;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#box1 p:before&#123;</span></span><br><span class="line"><span class="undefined">content:"Before Content";</span></span><br><span class="line"><span class="undefined">color:yellow;</span></span><br><span class="line"><span class="undefined">background-color:red;</span></span><br><span class="line"><span class="undefined">padding:10px;</span></span><br><span class="line"><span class="undefined">font-size: 20pt</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#box1 p:after&#123;</span></span><br><span class="line"><span class="undefined">content:"After Content";</span></span><br><span class="line"><span class="undefined">color:blue;</span></span><br><span class="line"><span class="undefined">background-color:red;</span></span><br><span class="line"><span class="undefined">padding:10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>middle content1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>middle content2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>middle content3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="important-最高权重"><a href="#important-最高权重" class="headerlink" title="!important 最高权重"></a>!important 最高权重</h1><style>    #box2{        padding:20px;        border: 1px solid red;    }    #box2 span{        font-size:18pt;    }    span{        font-size:10pt !important;    }    #box3{        padding:20px;        border: 1px solid brown;    }    #box3 label{        font-size:20pt;    }    label{        font-size:10pt;    }</style><div id="box2"><br>    this is box2<br>    <span>this is span</span><br></div><br><div id="box3"><br>    this is box3<br>    <label>this is span</label><br></div><p><strong>对比box2 和box3内的span和label的字体可以看出<br>！important将元素的优先级被提高了。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//上图代码展示</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#box2&#123;</span></span><br><span class="line"><span class="undefined">padding:20px;</span></span><br><span class="line"><span class="undefined">border: 1px solid red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#box2 span&#123;</span></span><br><span class="line"><span class="undefined">font-size:18pt;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">span&#123;</span></span><br><span class="line"><span class="undefined">font-size:10pt !important;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#box3&#123;</span></span><br><span class="line"><span class="undefined">padding:20px;</span></span><br><span class="line"><span class="undefined">border: 1px solid brown;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#box3 label&#123;</span></span><br><span class="line"><span class="undefined">font-size:20pt;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">label&#123;</span></span><br><span class="line"><span class="undefined">font-size:10pt;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">this is box2</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span></span><br><span class="line">this is box3</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS for ... of</title>
      <link href="/2018/04/09/js-for-of/"/>
      <url>/2018/04/09/js-for-of/</url>
      <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ES6 借鉴 C++、Java、C# 和 Python 语言，引入了for…of循环，作为遍历所有数据结构的统一的方法。</p><p>一个数据结构只要部署了Symbol.iterator属性，就被视为具有 iterator 接口，就可以用for…of循环遍历它的成员。也就是说，for…of循环内部调用的是数据结构的Symbol.iterator方法。</p><p>for…of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。</p><h3 id="for…of使用"><a href="#for…of使用" class="headerlink" title="for…of使用"></a>for…of使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> arr)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>等同于forEach</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//打印结果：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JS 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-Vuex</title>
      <link href="/2018/01/06/Vue-Vuex/"/>
      <url>/2018/01/06/Vue-Vuex/</url>
      <content type="html"><![CDATA[<h2 id="为什么研究Vue"><a href="#为什么研究Vue" class="headerlink" title="为什么研究Vue"></a>为什么研究Vue</h2><blockquote><p>作为一个前端开发，不会Vue简直呵呵。—— 某资深前端开发工程师曰。</p></blockquote><h2 id="前兆"><a href="#前兆" class="headerlink" title="前兆"></a>前兆</h2><p>我从入门前端，第一次亲密接触的就是<strong>React</strong>，直到最近team重组，新的leader在一次晨会中曰：“希望以后我们组的前端能使用Vue来开发。”</p><p>而我们组的前端，貌似就剩我自己了，另外一个还想着回归<strong>Java</strong>。</p><p>这让我这个<strong>React</strong>起家的小前端工程师，内心一万头XXX…奔腾而过。</p><p>当然Vue是很好的（要不然也不会在这BB了）。但是，脱离舒适区是一个痛苦的事情，脱离使用了很久的框架转战新的工具，搁谁都不可能很欢喜。但是，这是一个过程，需要慢慢适应……</p><h2 id="突如其来的挑战"><a href="#突如其来的挑战" class="headerlink" title="突如其来的挑战"></a>突如其来的挑战</h2><p>PO小姐姐来找我，问我手上活怎么样，是不是还在写bug。我说写的差不多了，呸，改的差不多了！</p><p>呵呵呵，那就给你介绍个新活呗。噼里啪啦一通讲。没懂啊。不要紧，我们上楼找帮手。（楼上新办公室，两层办公区，牛X的不要不要的），于是跟着PO小姐姐上楼吸甲醛。</p><p>我们组一直都是用Vue做项目啊，如果用React做，以后维护起来……</p><p>那好吧，我可以学习Vue。这就是我，学习动力十足的我。</p><p>下周二要Demo哦。MMP，今天周五了，回家学习两天，周二你就要一个Vue和H5结合的Demo，还是音乐视频互动感超强的那种？</p><p>呵呵哒。我一言不发。我只是来打酱油的，我是来学习的，我是你们的帮手而已，别把希望寄托在一个等待入门的小朋友身上，否则后果自负（客户搞事情，可别拿我当挡箭牌）。</p><h2 id="周末，趁热来一发"><a href="#周末，趁热来一发" class="headerlink" title="周末，趁热来一发"></a>周末，趁热来一发</h2><p><strong>Vue</strong>被赞的一B。至今没用过是不是太low B了。江湖传言，文档维护的相当流弊，何不前往一探究竟 。</p><p>于是开始了我学习新技能的一贯作风，啃文档！</p><p>好吧，get start,我的最爱，按部就班，照猫画虎，比葫芦画瓢……</p><p>来个Vue的ToDoList 吧。</p><p>脱了衣服，说干就干。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cbc242055ff19?w=2876&amp;h=888&amp;f=jpeg&amp;s=185533" alt="todolist"></p><p>效果永远如此low B,css 是我不愿提及的痛！</p><p>很简单，输入框内填写内容，敲击回车，add one todo.</p><p>每个todo 都可以进行remove 和 update ,update 做的比较简单，依旧是输入框输入内容，然后直接点击要更新的todo 的update 按钮即可。</p><p>总数量 total 通过vuex 的getters 获得 todos.length。</p><p>思路是不是很清晰？道理是不是很简单？你别急，惊喜和意外在后面。</p><h2 id="惊喜？！意外？！"><a href="#惊喜？！意外？！" class="headerlink" title="惊喜？！意外？！"></a>惊喜？！意外？！</h2><p>写了这么久不上一点代码，有点耍流氓的赶脚。所以，走一波 code。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vue-todolist"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"peter"</span>,</span><br><span class="line">    <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">    <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">        "element-ui": "^2.0.10",//这货并没有用到，也就是研究的时候好奇，装上看看</span><br><span class="line">        "vue": "^2.5.13",</span><br><span class="line">        "vue-router": "^3.0.1",//同上</span><br><span class="line">        "vuex": "^3.0.1"</span><br><span class="line">    &#125;,</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">        "babel-plugin-transform-runtime": "^6.23.0",</span><br><span class="line">        "babel-preset-es2015": "^6.24.1",</span><br><span class="line">        "parcel-bundler": "^1.4.1",//这个可是最新流行的小鲜肉，近乎“0配置”的打包工具</span><br><span class="line">        "parcel-plugin-vue": "^1.5.0",//这个是与上结合食用的插件</span><br><span class="line">        "vue-template-compiler": "^2.5.13",</span><br><span class="line">        "babel-preset-env": "^1.3.2",</span><br><span class="line">        "babel-preset-stage-2": "^6.22.0"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"env"</span>,</span><br><span class="line">        <span class="string">"stage-2"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cbce8fcc36f2a?w=780&amp;h=1714&amp;f=jpeg&amp;s=106436" alt="structure"></p><p>因为太简单，压根也没有任何组件化的余地，所以，components文件夹形同虚设。</p><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);<span class="comment">//重点来了，这玩意一定要在store创建之前use，要不然会出错哦。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        todos: []</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add: <span class="function">(<span class="params">state, todo</span>) =&gt;</span> &#123;</span><br><span class="line">            state.todos.push(todo);</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function">(<span class="params">state, id</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> index = state.todos.findIndex(<span class="function"><span class="params">v</span> =&gt;</span> v.id === id);</span><br><span class="line">            state.todos.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        update: <span class="function">(<span class="params">state, update</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> length = state.todos.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> tmpTodo = state.todos[i];</span><br><span class="line">                <span class="keyword">if</span> (tmpTodo.id === update.id) &#123;</span><br><span class="line">                    state.todos[i].content = update.content;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        clear: <span class="function"><span class="params">state</span> =&gt;</span> state.todos = []<span class="comment">//一会儿这里有惊喜和意外发生！！！</span></span><br><span class="line">        <span class="comment">// clear: state =&gt; state.todos.splice(0, state.todos.length) 这行代码才是正解</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        count: <span class="function"><span class="params">state</span> =&gt;</span> state.todos.length,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commit = store.commit;</span><br><span class="line"><span class="keyword">const</span> getters = store.getters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; store, commit, getters &#125;;</span><br></pre></td></tr></table></figure><p>整体看下来是不是和 <strong>mobx</strong> 很像。这哪里是很像，这简直就是一模一样（这样说Vue粉儿们会不会砍死我）。</p><p>clear方法，我一开始很不由自主的使用了原始暴力而且一贯有效没问题的 = []。后来事实证明，没有一层不变的写法，只有一直变化套路。</p><p>这种原始暴力的方式，在我使用Redux 和mobx的过程中简直就是屡试不爽，怎么突然就哑火了呢。</p><p>问题是这样的：<br>虽然这种方式可以将store下state上的todos清空，但是并没有引起视图的变化。</p><p><strong>Why？How？What？</strong></p><h4 style="color:#42b983">划重点来啦！！！</h4><p>这是clear之前的截图(有devtool就是爽，啥都一目了然、尽收眼底)</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cbdc18094a079?w=2872&amp;h=882&amp;f=jpeg&amp;s=205402" alt="before clear"></p><p>这是clear之后的图</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cbe02c031985d?w=2878&amp;h=1050&amp;f=jpeg&amp;s=259266" alt="after clear"></p><p>咦，我擦，这是什么情况！！！ BUG！！！BUG！！！BUG！！！我惊慌失措了！！！</p><p>淡定，遇到bug一定要冷静沉着思考分析……</p><h4 style="color:#42b983">领悟！！！</h4><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cbe310d40f547?w=2878&amp;h=1000&amp;f=jpeg&amp;s=232421" alt="totally clear"></p><p>当我把模式调到查看组件状态时，借助devtool让我恍然大悟。</p><blockquote><p>MMP，store.state.todos 是一个数组，而数组是一个Object，Object是引用类型数据，我将它传递给App的data.todos,等于是做了一次复制（浅拷贝），data保留的是对store.state.todos的引用。</p></blockquote><p>是不是没明白，简单点吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">store.state.todos-&gt; (old hash:12345)</span><br><span class="line"></span><br><span class="line">data.todos-&gt; (old hash:12345)</span><br><span class="line"></span><br><span class="line">store.state.todos = [];//这一操作之后，惊喜和意外发生了</span><br><span class="line"></span><br><span class="line">store.state.todos-&gt;(new hash:98765)</span><br><span class="line"></span><br><span class="line">data.todos-&gt;(old hash:12345)</span><br><span class="line"></span><br><span class="line">// 这里的hash是我为了说明情况儿 XJB 写的，别当真。</span><br><span class="line"></span><br><span class="line">//也就是说，暴力赋值空数组时候，state下的todos已经不是原来的那个todos了，</span><br><span class="line">//这个新的数组在内存中占有一份新的地理位置，</span><br><span class="line">//而原来的那个old todos的引用，依旧被data保持着，停留在内存里，成为了bug的滋生地</span><br><span class="line">//还是一种叫做内存泄漏的exception的源泉</span><br></pre></td></tr></table></figure><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;h1&gt;Vue ToDoList&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">      &lt;input </span></span><br><span class="line"><span class="regexp">       @keyup.enter="add"</span></span><br><span class="line"><span class="regexp">       @input="input"</span></span><br><span class="line"><span class="regexp">       :value="content"</span></span><br><span class="line"><span class="regexp">        placeholder="做点什么吧..."/</span>&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn-a"</span> @click=<span class="string">"clear"</span>&gt;Clear&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;a style="font-size:15pt;"&gt;total:&#123;&#123;count&#125;&#125;&lt;/</span>a&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">          &lt;li v-<span class="keyword">for</span>=<span class="string">"t in todos"</span>&gt;</span><br><span class="line">              &lt;span&gt;&#123;&#123;t.content&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">              &lt;button @click="update(t.id)"&gt;update&lt;/</span>button&gt;</span><br><span class="line">              &lt;button @click=<span class="string">"remove(t.id)"</span>&gt;remove&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import &#123; TodoItem &#125; from "./</span>components<span class="string">";</span></span><br><span class="line"><span class="string">import &#123; store, commit, getters &#125; from "</span>./store<span class="string">";</span></span><br><span class="line"><span class="string">import todo from "</span>./public/todo<span class="string">";</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">  data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      todos: store.state.todos,</span></span><br><span class="line"><span class="string">      content: "</span><span class="string">"</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  computed: &#123;</span></span><br><span class="line"><span class="string">    count: () =&gt; getters.count</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    input: function(e) &#123;</span></span><br><span class="line"><span class="string">      this.content = e.target.value;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    add: function(e) &#123;//ES5写法多了几个字母，但是大大滴不一样哦</span></span><br><span class="line"><span class="string">      let t = new todo();</span></span><br><span class="line"><span class="string">      t.content = this.content;</span></span><br><span class="line"><span class="string">      commit("</span>add<span class="string">", t);</span></span><br><span class="line"><span class="string">      this.content = "</span><span class="string">";</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    remove: id =&gt; &#123;//注意这方法的写法与ES5写法的不同，很飘逸，</span></span><br><span class="line"><span class="string">      commit("</span>remove<span class="string">", id);</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    update: function(id) &#123;</span></span><br><span class="line"><span class="string">      commit("</span>update<span class="string">", &#123; id, content: this.content &#125;);</span></span><br><span class="line"><span class="string">      this.content = "</span><span class="string">";</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    clear: () =&gt; commit("</span>clear<span class="string">")</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>没办法，写到这种地步，只能咬牙继续，是谁说要好好学习的……</p><p>Vue 的基本属性 methods 的定义，让我百思不得其解了一小会儿。</p><p>比如，上述代码中看到的 add ,input update 这三个方法，我都采用了ES5的写法，通过function关键字定义函数；而remove和clear两个，我则使用了ES6的箭头函数写法。</p><p>同样是方法，怎么差距就这么大呢！！！</p><p>其实一开始，我清一色的写的箭头函数，但是发现，有问题，问题很简答，this = undefined。</p><p>我就纳闷了，这尼玛又是什么鬼，也来不及再去Google了，之前乱投医，试一试吧，换成了ES5，嘿，无药而治，立竿见影，奇迹般地好了！</p><blockquote><p><strong>真相只有一个！</strong> —— 柯南。</p></blockquote><p>如同没有无缘无故的爱，也没有无缘无故的恨那般，没有可能我随便一改写法，就奇迹般的好了！</p><p>肯定有原因！</p><blockquote><p>箭头函数表达式的语法比函数表达式更短，并且不绑定自己的this，arguments，super或 new.target。这些函数表达式最适合用于非方法函数，并且它们不能用作构造函数。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">MDN</a></p></blockquote><p>有没有很清楚很明白，没有吧。</p><p>作为一个在React里漫天飞舞箭头函数绑定this的小前端而言，这么机器的翻译，我才不会当真呢！</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cbfef679fd990?w=2148&amp;h=1382&amp;f=jpeg&amp;s=245368" alt="lxf"><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001438565969057627e5435793645b7acaee3b6869d1374000" target="_blank" rel="noopener">廖雪峰</a></p><p>看了廖老师的文章，赶紧换了套路—–&gt;</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cc032431f6724?w=1132&amp;h=1552&amp;f=jpeg&amp;s=342184" alt="MMP"></p><p>MMP,这就是不问所以然，就XJB写的下场！</p><p>仔细想一想吧。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/6/160cc0503092d858?w=1054&amp;h=1458&amp;f=jpeg&amp;s=347565" alt="happy"></p><p>能够调试是一件多么幸福的事情，一目了然的看到，function函数内的this指向的是整个VueComponent,而在箭头函数内，毛都没有！为啥呢？廖雪峰老师说的很明白了，就是说，箭头函数的this指向调用方的，而我将add方法通过@符号绑定给了input标签，而且在函数加载的过程中，input标签还没有挂载完毕呢，所以，箭头函数在那一瞬间，毛也咩有捕获到，所以它的this是个undefined，而function函数就不一样了，它在初始化的时候，捕捉到的是整个对象本身（VueComponent）,所以……</p><p>虽然不知道这种理解方式对不对，但是暂时这样认为吧，回头再找大神求证。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>罗里吧嗦写了这么多，时间都是23：17了，也该告一段落了，对于我这个Vue新生儿来说，这一天折腾的已经不少了。</p><p>希望能够在往后的日子里，和她相爱不相杀。</p>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>buddha</title>
      <link href="/2017/12/24/buddha/"/>
      <url>/2017/12/24/buddha/</url>
      <content type="html"><![CDATA[<h1 id="一段被无数前端程序员追奉经典的代码"><a href="#一段被无数前端程序员追奉经典的代码" class="headerlink" title="一段被无数前端程序员追奉经典的代码"></a>一段被无数前端程序员追奉经典的代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> buddhaBless = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([</span><br><span class="line">    <span class="string">"                   _ooOoo_"</span>,</span><br><span class="line">    <span class="string">"                  o8888888o"</span>,</span><br><span class="line">    <span class="string">"                  88\" . \"88"</span>,</span><br><span class="line">    <span class="string">"                  (| -_- |)"</span>,</span><br><span class="line">    <span class="string">"                  O\\  =  /O"</span>,</span><br><span class="line">    <span class="string">"               ____/`---'\\____"</span>,</span><br><span class="line">    <span class="string">"             .'  \\\\|     |//  `."</span>,</span><br><span class="line">    <span class="string">"            /  \\\\|||  :  |||//  \\"</span>,</span><br><span class="line">    <span class="string">"           /  _||||| -:- |||||-  \\"</span>,</span><br><span class="line">    <span class="string">"           |   | \\\\\\  -  /// |   |"</span>,</span><br><span class="line">    <span class="string">"           | \\_|  ''\\---/''  |   |"</span>,</span><br><span class="line">    <span class="string">"           \\  .-\\__  `-`  ___/-. /"</span>,</span><br><span class="line">    <span class="string">"         ___`. .'  /--.--\\  `. . __"</span>,</span><br><span class="line">    <span class="string">"      .\"\" '&lt;  `.___\\_&lt;|&gt;_/___.'  &gt;'\"\"."</span>,</span><br><span class="line">    <span class="string">"     | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |"</span>,</span><br><span class="line">    <span class="string">"     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /"</span>,</span><br><span class="line">    <span class="string">"======`-.____`-.___\\_____/___.-`____.-'======"</span>,</span><br><span class="line">    <span class="string">"                   `=---='"</span>,</span><br><span class="line">    <span class="string">"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"</span>,</span><br><span class="line">    <span class="string">"         佛祖保佑       永无BUG"</span></span><br><span class="line">].join(<span class="string">'\n'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>惊不惊喜？意不意外？</strong></p>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mobx 初探</title>
      <link href="/2017/12/23/Mobx-ToDoList/"/>
      <url>/2017/12/23/Mobx-ToDoList/</url>
      <content type="html"><![CDATA[<h1 id="Mobx-初探"><a href="#Mobx-初探" class="headerlink" title="Mobx 初探"></a>Mobx 初探</h1><h2 id="什么是Mobx"><a href="#什么是Mobx" class="headerlink" title="什么是Mobx"></a>什么是Mobx</h2><blockquote><p><a href="http://cn.mobx.js.org/" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener">github-mobx</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MobX 是一个经过战火洗礼的库，</span><br><span class="line">它通过透明的函数响应式编程</span><br><span class="line">(transparently applying functional reactive programming - TFRP)</span><br><span class="line">使得状态管理变得简单和可扩展。</span><br></pre></td></tr></table></figure><p><img src="http://cn.mobx.js.org/flow.png" alt="pic"></p><p>更多详细介绍，请移步官网细阅。</p><h2 id="为什么使用Mobx"><a href="#为什么使用Mobx" class="headerlink" title="为什么使用Mobx"></a>为什么使用Mobx</h2><blockquote><p>React 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而MobX提供机制来存储和更新应用状态供 React 使用。 ——官方文档</p></blockquote><p>可能我们都比较熟悉Redux,简而言之Mobx是比Redux更有力的和React结合使用的助手。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><blockquote><p>下面我们就用一个例子简单的使用Mobx——ToDOList.<br>Talking is cheap, show me your code!<br><a href="https://github.com/GitHubJiKe/parcel-react-demo" target="_blank" rel="noopener">代码地址</a> 由于没有和parcel使用初探的代码分离，所以，希望你也能看的明白</p></blockquote><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>VSCode </p><h4 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a>编辑器配置</h4><blockquote><p>为了使用Es.next的装饰器语言@，需要配置VsCode，具体——<a href="http://cn.mobx.js.org/best/decorators.html" target="_blank" rel="noopener">如何(不)使用装饰器</a></p></blockquote><p><img src="https://thumbnail0.baidupcs.com/thumbnail/537c4003af1581363547bb5c15dfed80?fid=3929020572-250528-342868260175806&amp;time=1514019600&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-QZ1xavc6uNw6wJCQOySTm%2BHz4KY%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=8273303735290392813&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100&amp;vuk=-&amp;ft=video" alt="vscode setup"></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//package.json file setup:</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;mobx&quot;: &quot;^3.4.1&quot;,</span><br><span class="line">    &quot;mobx-react&quot;: &quot;^4.3.5&quot;,</span><br><span class="line">    &quot;react&quot;: &quot;^16.2.0&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^16.2.0&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//package.json file setup:</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.4&quot;,</span><br><span class="line">    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;babel-preset-react&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;babel-preset-stage-1&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;mobx-react-devtools&quot;: &quot;^4.2.15&quot;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//.babelrc file setup:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;env&quot;,</span><br><span class="line">    &quot;react&quot;,</span><br><span class="line">    &quot;es2015&quot;,</span><br><span class="line">    &quot;stage-1&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;transform-decorators-legacy&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="store-创建"><a href="#store-创建" class="headerlink" title="store 创建"></a>store 创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import &#123; observable, autorun, computed, action &#125; from &apos;mobx&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class toDo &#123;</span><br><span class="line">  id = Math.random();</span><br><span class="line">  @observable title = &apos;&apos;;</span><br><span class="line">  @observable completed = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class todoStore &#123;</span><br><span class="line">  @observable todos = [];</span><br><span class="line"></span><br><span class="line">  @computed get completedCount() &#123;</span><br><span class="line">    return this.todos.filter(todo =&gt; todo.completed).length;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @computed get totalCount() &#123;</span><br><span class="line">    return this.todos.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @action.bound toggleCompleted(id) &#123;</span><br><span class="line">    this.todos.forEach(todo =&gt; &#123;</span><br><span class="line">      if (todo.id === id) todo.completed = !todo.completed;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @action.bound addToDo(title) &#123;</span><br><span class="line">    if (!title) return alert(&apos;please input something...&apos;);</span><br><span class="line">    let todo = new toDo();</span><br><span class="line">    todo.title = title;</span><br><span class="line">    this.todos.push(todo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const store = new todoStore();</span><br><span class="line"></span><br><span class="line">export &#123; store &#125;</span><br></pre></td></tr></table></figure><h4 id="ToDo组件"><a href="#ToDo组件" class="headerlink" title="ToDo组件"></a>ToDo组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123; observer &#125; from &quot;mobx-react&quot;;</span><br><span class="line">import &#123; store &#125; from &apos;../../store&apos;</span><br><span class="line">import &apos;./style.css&apos;</span><br><span class="line"></span><br><span class="line">@observer export default class ToDo extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; title, id, completed &#125; = this.props;</span><br><span class="line">    return (&lt;div</span><br><span class="line">      className=&#123;`todo $&#123;completed ? &apos;completed&apos; : &apos;&apos;&#125;`&#125;</span><br><span class="line">      onClick=&#123;() =&gt; store.toggleCompleted(id)&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;title&#125;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//style.css</span><br><span class="line">.todo&#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">  margin: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo.completed&#123;</span><br><span class="line">  background-color: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; observer &#125; from &quot;mobx-react&quot;;</span><br><span class="line">import DevTools from &apos;mobx-react-devtools&apos;</span><br><span class="line">import ToDo from &apos;./components/ToDo&apos;</span><br><span class="line">import &#123; store &#125; from &apos;./store&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const TEXT = &apos;please input something...&apos;;</span><br><span class="line">const ToDoList = (&#123; todos &#125;) =&gt; todos.map(t =&gt; &lt;ToDo key=&#123;t.id&#125; &#123;...t&#125; /&gt;);</span><br><span class="line"></span><br><span class="line">@observer export default class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      title: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; title &#125; = this.state;</span><br><span class="line">    const &#123; todos, totalCount, completedCount &#125; = store;</span><br><span class="line">    return (&lt;div className=&quot;APP&quot;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        style=&#123;&#123; width: 300 &#125;&#125;</span><br><span class="line">        placeholder=&#123;TEXT&#125;</span><br><span class="line">        value=&#123;title&#125;</span><br><span class="line">        onChange=&#123;e =&gt; this.setState(&#123; title: e.currentTarget.value &#125;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">        store.addToDo(title);</span><br><span class="line">        this.setState(&#123; title: &apos;&apos; &#125;);</span><br><span class="line">      &#125;&#125;&gt;Add one ToDo&lt;/button&gt;</span><br><span class="line">      &lt;div&gt;&#123;`total count:$&#123;totalCount&#125;`&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;&#123;`total completed count:$&#123;completedCount&#125;`&#125;&lt;/div&gt;</span><br><span class="line">      &lt;ToDoList todos=&#123;todos&#125; /&gt;</span><br><span class="line">      &lt;DevTools /&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://thumbnail0.baidupcs.com/thumbnail/3b3f68cea2e0a84dbdbee84b9066b8d1?fid=3929020572-250528-464394264288365&amp;time=1514019600&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-7n8nPdwolvskHqOz2ktGLOayTZo%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=8273592634680096080&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100&amp;vuk=-&amp;ft=video" alt="show"></p>]]></content>
      
      <categories>
          
          <category> Mobx </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Parcel &amp; React 初探</title>
      <link href="/2017/12/23/parcel-react-demo/"/>
      <url>/2017/12/23/parcel-react-demo/</url>
      <content type="html"><![CDATA[<h1 id="parcel-react-demo"><a href="#parcel-react-demo" class="headerlink" title="parcel-react-demo"></a>parcel-react-demo</h1><p><a href="https://github.com/GitHubJiKe/parcel-react-demo" target="_blank" rel="noopener">项目地址</a></p><p><img src="https://user-gold-cdn.xitu.io/2017/12/22/1607e2c7fc25def7?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1" alt="效果图"></p><h2 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h2><p><a href="https://parceljs.org/" target="_blank" rel="noopener">官网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parcel 是一个网络应用打包工具, </span><br><span class="line">适用于经验不同的开发者.</span><br><span class="line">它利用多核处理提供了极快的速度, </span><br><span class="line">并且不需要任何配置.</span><br></pre></td></tr></table></figure><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p><a href="https://reactjs.org/" target="_blank" rel="noopener">官网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A JavaScript library</span><br><span class="line">一个用于构建用户图片界面的</span><br><span class="line">for building user interfaces</span><br><span class="line">javascript 库</span><br></pre></td></tr></table></figure><h2 id="parcel-amp-React"><a href="#parcel-amp-React" class="headerlink" title="parcel &amp; React"></a>parcel &amp; React</h2><blockquote><p>根据本工程根目录下的package.json的描述文件install相关依赖</p></blockquote><h3 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h3><p>Yarn:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add parcel-bundler</span><br></pre></td></tr></table></figure><p>npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g parcel-bundler</span><br></pre></td></tr></table></figure><p>全局安装后就可以使用parcel了。</p><h2 id="使用后感"><a href="#使用后感" class="headerlink" title="使用后感"></a>使用后感</h2><ul><li>很快（缓存机制）</li><li>简单上手（配置项很少）</li><li>有待采坑</li></ul>]]></content>
      
      <categories>
          
          <category> Parcel </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>My Gallery</title>
      <link href="/2017/12/12/My-Gallery/"/>
      <url>/2017/12/12/My-Gallery/</url>
      <content type="html"><![CDATA[<h1 id="My-Gallery"><a href="#My-Gallery" class="headerlink" title="My Gallery"></a>My Gallery</h1><p><img src="https://images.unsplash.com/photo-1467791702337-32e58d17bb6d?auto=format&fit=crop&w=3306&q=80&ixid=dW5zcGxhc2guY29tOzs7Ozs%3D"></p>]]></content>
      
      <categories>
          
          <category> 美图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> photos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React 介绍</title>
      <link href="/2017/12/11/React-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2017/12/11/React-%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>A JavaScript library for building user interfaces<br>用来构建用户界面一个JS库</p></blockquote><h2 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h2><p><strong>UI = render(data)</strong><br><strong>数据驱动视图</strong></p><pre><code>UI：视图，一个函数的执行结果render：纯函数，没有任何副作用data: state,状态驱动视图变化</code></pre><h2 id="Virtual-DOM-虚拟DOM"><a href="#Virtual-DOM-虚拟DOM" class="headerlink" title="Virtual DOM 虚拟DOM"></a>Virtual DOM 虚拟DOM</h2><p><strong>直接修改DOM元素的代价太大，通过虚拟DOM的变化，引起真实DOM的变化，相对cheap。</strong></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><strong>事件</strong>  —-&gt; <strong>render</strong>  —-&gt; <strong>virtual DOM 变化</strong> —-&gt; <strong>DOM节点修改</strong></p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="props-组件对外接口"><a href="#props-组件对外接口" class="headerlink" title="props 组件对外接口"></a>props 组件对外接口</h3><h3 id="state-组件内部状态"><a href="#state-组件内部状态" class="headerlink" title="state 组件内部状态"></a>state 组件内部状态</h3><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>prop用于定义外部接口</li><li>state用于记录内部状态</li><li>prop的赋值在外部世界使用组件时</li><li>state的赋值在组件内部</li><li>组件不应该改变prop的值</li><li>state存在的意义就是让组件发生改变</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="三个过程："><a href="#三个过程：" class="headerlink" title="三个过程："></a>三个过程：</h3><ul><li>装载过程（Mount）也就是把组件第一次在DOM树上渲染的过程</li><li>更新过程（Update）当组件被重新渲染的过程</li><li>卸载过程（Unmount）组件从DOM树上删除的过程</li></ul><h3 id="装载过程生命周期方法："><a href="#装载过程生命周期方法：" class="headerlink" title="装载过程生命周期方法："></a>装载过程生命周期方法：</h3><ul><li>constructor</li><li>componentWillMount <code>在此方法内setState无效</code></li><li>render <code>纯函数 并不往状态树上挂在DOM，只是返回一个JSX对象，React库根据返回对象决定如何渲染</code></li><li>componentDidMount <code>可以再次方法内获取到任何组件内DOM节点，因为组件已经挂载完毕</code></li></ul><h3 id="更新过程生命周期方法："><a href="#更新过程生命周期方法：" class="headerlink" title="更新过程生命周期方法："></a>更新过程生命周期方法：</h3><ul><li>componentWillReceiveProps(nextProps) <code>通过setState方法出发更新不会调用此函数</code></li><li>shouldComponentUpdate(nextProps,nextState) <code>最重要函数之一，必须有返回结果（boolean类型），可以通过定制此函数决定组件是否需要重新渲染，进而提升性能</code></li><li>componentWillUpdate <code>不可以在此方法内setState,会造成死循环</code></li><li>render</li><li>componentDidUpdate <code>不可以在此方法内setState,会造成死循环</code></li><li>componentDidCatch(err, info)<code>(v16新特性)  componentDidCatch</code> </li></ul><hr><pre><code>this.forceUpdate();可以暴力的触发一次重新绘制（render）</code></pre><hr><h3 id="卸载过程生命周期方法："><a href="#卸载过程生命周期方法：" class="headerlink" title="卸载过程生命周期方法："></a>卸载过程生命周期方法：</h3><ul><li>componentWillUnmount </li></ul><h3 id="组件分类"><a href="#组件分类" class="headerlink" title="组件分类"></a>组件分类</h3><ul><li>stateless: 无状态组件</li><li>class: 类组件</li><li>functional: 函数式组件</li></ul><h2 id="提高效率"><a href="#提高效率" class="headerlink" title="提高效率"></a>提高效率</h2><h2 id="脚手架-amp-tools"><a href="#脚手架-amp-tools" class="headerlink" title="脚手架 &amp; tools"></a>脚手架 &amp; tools</h2><ul><li><a style="color:blue" href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">create-react-app</a></li><li><a style="color:blue" href="https://github.com/CVarisco/create-component-app" target="_blank" rel="noopener">create-component-app</a></li><li><a style="color:blue" href="https://www.styled-components.com/" target="_blank" rel="noopener">styled-components</a></li></ul><hr><pre><code>npm i create-react-app -g  npm i create-component-app npm i styled-components --save </code></pre><hr>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>English In A Moinute</title>
      <link href="/2017/12/11/English-In-A-Moinute/"/>
      <url>/2017/12/11/English-In-A-Moinute/</url>
      <content type="html"><![CDATA[<h1 id="Break-even-收支平衡、够本"><a href="#Break-even-收支平衡、够本" class="headerlink" title="Break even 收支平衡、够本"></a>Break even 收支平衡、够本</h1><h2 id="conversition"><a href="#conversition" class="headerlink" title="conversition:"></a>conversition:</h2><pre><code>Hey, how is your friend‘s new business doing?嘿，你朋友的新开业的生意怎么样？The first year her coffee shop was open, she barely broke even.她咖啡馆第一年营业，仅仅够本而已。That&apos;s not bad. Many small businesses don&apos;t even make it to the second year.let alone break even.已经很不错了，许多小本生意甚至都维持不到第二年，更何况收支平衡 了。Yeah, she is really hoping to actually earn a profit this year. 是呀，她非常希望今年能盈利。</code></pre><h1 id="Keep-your-eye-on-the-ball-集中注意力"><a href="#Keep-your-eye-on-the-ball-集中注意力" class="headerlink" title="Keep your eye on the ball 集中注意力"></a>Keep your eye on the ball 集中注意力</h1><h2 id="conversition-1"><a href="#conversition-1" class="headerlink" title="conversition:"></a>conversition:</h2><pre><code>Hey, John. How&apos;s your Arabic /&apos;ærəbik/ （阿拉伯）class going?嘿，约翰。你的阿拉伯课程学的怎么样？It&apos;s going okay. I&apos;m not studying as much as I should be.还好吧。不过我并没有很努力地学习。John, you&apos;d better keep your eye on the ball, if you want to win that scholarship to study in Egypt  /ˈi:dʒɪpt/ (埃及).约翰，你最好重视起来了,如果你想赢得去埃及学习的奖学金的话。keep your eye on the ball: means keep your attention to something that is important to you or to reach a goal.意味着把注意力放在对你而言比较重要的事情上，或者是为了实现某个目标。</code></pre><h1 id="Moving-Target"><a href="#Moving-Target" class="headerlink" title="Moving Target"></a>Moving Target</h1><h2 id="conversition-2"><a href="#conversition-2" class="headerlink" title="conversition:"></a>conversition:</h2><pre><code>a target is something you want to hit, like you shoot a bow and arrow. 一个任务（靶子）就是你想打中的一个东西，就好像你拉弓射箭为了集中靶心。or a goal you want to reach .换言之就是一个你想要达到的目标。last month, the boss said the first person to get 100 new customers would get a 1000$ bonus.上个月，老板说谁第一个拉到了100个新客户就可以获得1000美元的奖金。And now he tells us we need to get 200 before getting the bonus money !然而现在他却告诉我们说想要获得奖金，还需要在拉到200个客户！it&apos;s just not fair! with him , it&apos;s always a moving target!这实在是不公平，对于他而言，目标总是在变化！</code></pre>]]></content>
      
      <categories>
          
          <category> 精进 </category>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>成为更好的自己</title>
      <link href="/2017/12/10/%E6%88%90%E4%B8%BA%E6%9C%80%E5%A5%BD%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
      <url>/2017/12/10/%E6%88%90%E4%B8%BA%E6%9C%80%E5%A5%BD%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      <content type="html"><![CDATA[<blockquote><p>每个人都渴望成功，成功源自于更好的自己！</p></blockquote><a id="more"></a><h1 id="成为更好的自己"><a href="#成为更好的自己" class="headerlink" title="成为更好的自己"></a>成为更好的自己</h1><h2 id="个人管理"><a href="#个人管理" class="headerlink" title="个人管理"></a>个人管理</h2><img src="/images/个人管理.png" title="个人管理"><h2 id="2017回顾"><a href="#2017回顾" class="headerlink" title="2017回顾"></a>2017回顾</h2><img src="/images/2017回顾.png" title="2017回顾"><h2 id="2018计划"><a href="#2018计划" class="headerlink" title="2018计划"></a>2018计划</h2><img src="/images/2018计划.png" title="2018计划"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了成为一个更好的自己，就要更加清晰地认识自己。<br>为了成为一个更好的自己，就要能认识到自己的缺陷。<br>为了成为一个更好的自己，就要能够努力提高自己的短板。<br>为了成为一个更好的自己，就要在意识到自己还不够好的那一刻行动起来！</p>]]></content>
      
      <categories>
          
          <category> 精进 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我提升 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>玛格丽特小镇</title>
      <link href="/2017/12/09/%E7%8E%9B%E6%A0%BC%E4%B8%BD%E7%89%B9%E5%B0%8F%E9%95%87/"/>
      <url>/2017/12/09/%E7%8E%9B%E6%A0%BC%E4%B8%BD%E7%89%B9%E5%B0%8F%E9%95%87/</url>
      <content type="html"><![CDATA[<blockquote><p>爱一个女人一生，意味着你要去爱一个少女、一个少妇、一个忙忙碌碌的中年妇女,以及一个唠唠叨叨的老太太。</p></blockquote><a id="more"></a><img src="/images/玛格丽特小镇.jpg" title="玛格丽特小镇"><h1 id="睡在床上的玛吉"><a href="#睡在床上的玛吉" class="headerlink" title="睡在床上的玛吉"></a>睡在床上的玛吉</h1><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>有时候，我们会言过其实。有时候，我们会说一些不是那么真实的话，暗自希望说出来以后即会成真。</p></blockquote><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>是这样的，有时候，我们以为自己是那样的感觉，说了出来，其实我们真是的感觉并不是那样的。就像我们经常在电影里看到的对白：“其实，我并没有自己认为的那样爱你……”。</p><p>有时候，我们以为自己爱上了一个人，迫不及待的将这种想法表达出来，而事实上，可能我们错误的估计了自己对待对方的感情，也许只是一种单纯的吸引而已。</p><p>我们会说一些不真实的话的原因是因为我们没有真正的理解自己的内心，并不知道什么是自己想要的和不能接纳的，我们捉摸不到自己的棱角和边界。所以当我们做出一些决定和说出一些话的时候，我们自己也是模糊的，也不清楚到底是不是那样的一个情况。</p><p>还有一种情况就是，我们之所以那样说，是为了让现实成为我们所说的那个样子。这只是一种简单的自我催眠而已，运气好的话，或许真的可以梦想成真。</p><p>主人公貌似是后者，他像玛吉说出了“我爱你”，可是玛吉却一言未发的跑开了，然后在几个街区以外的电话厅里给这个比自己年长曾是自己的助教的男人打电话回应道：“我爱你”。</p><p>就像主人公自己所言，玛吉跑开的这段空缺里，一定思考了很多，最后还是确定了一件事情，那就是可以向这个说爱自己的男人说“我爱你”。所以，主人公相信，这样经过深思熟虑的“爱”，是真的爱，他并没有为了玛吉的跑开而失落，反而觉得很欣慰。</p><p>之前看到一个美国人拍的视频，讲述美国人对待婚恋的观点，他讲到美国父母并不会很在意你的另一半有没有钱，有没有房子车子，美国父母在意的是你是不是真的爱你的另一半，是不是真的愿意和对方度过余生，和对方在一起是不是真的快乐。</p><p>他还讲到，美国男女朋友在一起大概经过一两年才会跟对方讲出那句我们国人觉得一开始就应该说出的话：“我爱你”。他们觉得，一开始就说这句话，有点太草率了，有点不负责任，有点操之过急，总之就是有点不切实际。毕竟第一次相见就能说出“我爱你”，可见这种“爱”是多么的随便和廉价。</p><p>可以看出，美国人对待爱情是非常理性的，他们可以接受作为男女朋友的交往和同居，但是并不一定说是在建立在爱彼此的基础上。他们可能觉得存在快乐的感觉就足够了，只有通过慢慢的相处下来，彼此的缺点优点都暴露无遗了，如果彼此还能接受和忍受，那么或许才有一定的基础可以共度一生，才值得说出那句“我爱你”。</p><p>抑或在此期间你又会遇到更加让你心动的人呢？</p><h2 id="摘录-1"><a href="#摘录-1" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>爱情伊始不就是对彼此的好奇心吗？<br>一个人为什么会坚持读一本书？<br>书的第一句话？还不错。<br>第一章？也还行。<br>等你快读到第三章时，为何不干脆读完呢？</p></blockquote><h3 id="感悟-1"><a href="#感悟-1" class="headerlink" title="感悟"></a>感悟</h3><p>在这一章节里，我对主人公有了新的认识，他是一个胆小而又怯懦的人，尤其对待感情。他不敢承认也不敢开口真正意义上的向玛吉求婚，作出承诺，给她一个充满爱的家庭和生活。当贝丝想要就这个问题询问他的时候，他开始闪烁其辞、选择逃避。</p><p>在和玛吉开车的路上，他又一次表现出了他性格里的矛盾，我甚至在他身上看到了些许自己的影子。那就是明明是那样的一种心理，却又推三阻四的不肯承认。我当然知道主人公对玛吉是真心的，但是他却有点不太相信自己能给玛吉一个承诺，以至于说出了一些让他自己蒙羞的话。</p><p>懦弱的人就是这样，遇到哪怕已经到手的美好，也生怕自己不配拥有，也觉得自己可能没有足够的能力保护得好那份美好。</p><p>爱情的伊始，不就是对彼此的好奇心吗？</p><p>如果连自己的好奇心都没有勇气坚持下去，那可真的是一个彻头彻尾的可怜虫呢！</p><h2 id="摘录-2"><a href="#摘录-2" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>人们常说，恋人通常都是小偷，的确，爱一个人就很难不从对方那里盗取某些东西。</p><p>爱情就像一个学步的贪婪孩子，只认得两个字，那就是“我的”。</p></blockquote><h3 id="感悟-2"><a href="#感悟-2" class="headerlink" title="感悟"></a>感悟</h3><p>在这一章节里，主人公已是一个将死之人，他用写小说的方式为我们讲述了前两章节他和玛吉的故事，一切的一切都漏洞百出，这一点从贝丝的嘴里我们可以得知，贝丝是主人公的姐姐，不过貌似还不是亲生的，但是不可否认贝丝很爱主人公。</p><p>主人公讲到，这文章抑或这小说，是写给他和玛吉的女儿——简——看的。他甚至自述了自己年轻时是个骗子、撒谎者、一个彻头彻尾的混蛋的事实，看来我对他的判断还是讲得通的。他自己也自嘲道：现实中，坏蛋和恋爱男主角同为一人的概率，往往远比你想象的要高。</p><p>在恋爱里，我们每个人都是小偷，偷走对方原本属于他/她的本来的一部分，然后异化或同化为自我的一部分。</p><p>我们往往无法喜欢一个人的全部，当在对方身上看到我们无法接纳的一面的时候，我们就会想尽办法的折腾对方去改变，去修正为自己喜欢的样子。其实他们并没有什么错，为什么要改变？为什么要修正呢？</p><p>自私的是我们才对，没有哪个人生来就是完全百分之百迎合另外一个人的。每个人都有其独特的个性，我们既然能够喜欢对方的某些方面，我们就应该也去接受某些我们不太喜欢的方面，只有这样，我们才能得到一个完整的没有被异化或者同化过的原原本本的对方，这或许也就是我们当初爱上彼此的初衷。</p><p>爱情里的每个人都是自私的小孩。因为占有，所以专横。我的——我就有一定的权利去改造，如果某一个点不让我满意，我就可以肆意妄为的delete 掉。但是最后，这样的一份感情恐怕是没有办法维持下去的。</p><p>就像主人公说的，很快，玛格丽特又把从他那里得到的姓氏还了回来（离婚），从此以后一直保持“汤”的姓氏。</p><h2 id="摘录-3"><a href="#摘录-3" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>夜半时分，我们都会变成无措的孩子。</p></blockquote><h3 id="感悟-3"><a href="#感悟-3" class="headerlink" title="感悟"></a>感悟</h3><p>说这话的人是玛吉，联系上下文来看的话，貌似是在挖苦完她的姑妈们都是老古板之后又对自己的某些行为作出的自我辩解。</p><p>她觉得自己是个孩子，不仅仅限于夜半时分。她只是说在夜半时分的时候才会意识到这一点而已，因为只有这样以一个孩子的身份，才能解释她白天的某些夸张、荒诞的行为。</p><p>或许，真如其言，我们都是这样的一群夜半时分才会意识到自己是个孩子的“孩子”。</p><h2 id="摘录-4"><a href="#摘录-4" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>彼此相爱的两个人，必须了解对方的一切，这是一句谎言。爱情当中，必须时不时的保持距离。</p></blockquote><h3 id="感悟-4"><a href="#感悟-4" class="headerlink" title="感悟"></a>感悟</h3><p>是不是觉得这话说的有点不合常理。</p><p>我们的公知大概就是，在爱情中我们要尽一切可能的多了解彼此，才能最大程度的消除和规避我们之间的争吵和矛盾。可是文章的这个观点好像完全悖于常理。</p><p>在我的理解中，作者的观点是有一定的道理的。试想一下，谈一场恋爱，或者穷其一生和某一个人长相厮守，假如这个人是一个你了解的彻头彻尾的人，你觉得这场没有任何悬念的恋爱，这种一眼穷尽的白头偕老，还有什么趣味性可言吗？你会想要这样的感情生活吗？</p><p>爱情应该像一场旅途和探险，过程之所以那么让人流连忘返，不是因为我们多么熟悉所有角落的风景是什么样子，恰恰是那种循序渐进的探索式的获得对未知的了解，才让我们享受其中，感情中正是这种逐渐的对彼此加深了解的过程才让我们对另一个人欲罢不能，才让我们在一个又一个的拐角处发现他/她不尽相同的魅力和特点，这才是两个人在一起经久不厌的根基。</p><p>这也解释了为什么我们找对象不喜欢从身边熟悉的人入手，就如那句俗话说的：兔子不吃窝边草。不是因为窝边草不好吃，而是这片草我们太熟悉了，没有任何刺激感、新鲜感、陌生感。</p><h2 id="摘录-5"><a href="#摘录-5" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>所有故事都一个样，不是吗？男人和女人相恋或失恋。有人出生，有人死去。不是幸福收尾，就是悲伤结局，只是故事中涉及的人物各不相同。某种意义上，这些男人和女人其实也都一个样。</p></blockquote><h3 id="感悟-5"><a href="#感悟-5" class="headerlink" title="感悟"></a>感悟</h3><p>这段话，作者假借玛吉之口说出，道尽了世间生活的本质和真相，有一种大彻大悟在里面蕴含着，使得玛吉这个形象一下子高大了起来。</p><h2 id="摘录-6"><a href="#摘录-6" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>没有记忆的人，拿起笔时也会成为饱经世事之人。</p></blockquote><h3 id="感悟-6"><a href="#感悟-6" class="headerlink" title="感悟"></a>感悟</h3><p>这话说的我老脸一红。哈哈哈。</p>]]></content>
      
      <categories>
          
          <category> novel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玛格丽特小镇 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Money</title>
      <link href="/2017/12/09/money/"/>
      <url>/2017/12/09/money/</url>
      <content type="html"><![CDATA[<h2 id="金钱并不是人生的全部"><a href="#金钱并不是人生的全部" class="headerlink" title="金钱并不是人生的全部"></a>金钱并不是人生的全部</h2><blockquote><p> 没有钱也许我们寸步难行，但是金钱却不是全部 ! —— Peter</p></blockquote><h3 id="比特币很疯狂"><a href="#比特币很疯狂" class="headerlink" title="比特币很疯狂"></a>比特币很疯狂</h3><img src="/images/bitecoin.jpeg" title="Bitcoin"><p>最近比特币炒的沸沸扬扬，据说在国外单价已经上升到了<strong>19000$</strong>,前美国美联储主席 <strong>格林斯潘</strong> 站出来发言，说是没有金银贵重金属作支撑的货币，早晚会落得一个美国独立战争期间的“<strong>大陆币</strong>”——一文不值，其主要原因就是没有贵重金属作为其财富的主要象征支撑。</p><h3 id="金钱，从小到大的“朋友”"><a href="#金钱，从小到大的“朋友”" class="headerlink" title="金钱，从小到大的“朋友”"></a>金钱，从小到大的“朋友”</h3><p>从小我们就开始接触金钱，小到一毛两毛五毛的纸票、硬币，大到我们生怕弄丢把口袋无得紧紧的几十上百的学费，我们每个人对于金钱都不陌生，但是在我们的成长过程中，上到学校老师，下到家长亲人，并没有哪个人去教导我们如何处理和金钱的关系以及我们应该如何正确的对待金钱。（毕竟，这些大人其实对于处理和金钱的关系也并不是左右逢源的，那还顾得及教育我们）</p><p>大概从高中开始，我们开始在政治课上接触经济学基本原理，了解到金钱的本质（货币）——一般等价物。我们知道了金钱的出现是为了减少或避免人们在以物易物的过程中麻烦，我们知道了金钱的购买力并不是一成不变的，货币可能贬值还可能升值，我们知道了世界上每个国家都可以发行自己国家的货币，不同国家之间的贸易需要进行货币换算，进而又引出了一大堆的关于汇率的知识。还有通货膨胀啦，投资和理财呀，风险和利润呀，等等等等。</p><h3 id="如何对待金钱？"><a href="#如何对待金钱？" class="headerlink" title="如何对待金钱？"></a>如何对待金钱？</h3><p>是的，我们明白了很多的基础概念，但是政治老师并没有像一位长者那样的切身的和我们谈论过生活中我们应该如何正确的对待和处理与金钱的关系。一路走来，无论我们的家庭贫穷也好，富足也罢，抑或是平平常常，我们都在使用金钱的过程中渐渐的形成了我们自己独特的金钱观。</p><p>就像开篇提到的 <strong>金钱并不是人生的全部</strong>。是的，像这种朴素儿简单的大道理，每个人都明白，但是真的当你面对金钱的诱惑或者是选择的时候，可能这些道理仅仅只是道理而已，并不能坚定不变的作为你行为的指导和准则。</p><p>中国有一句古话：<strong>君子爱财，取之有道。</strong></p><p>在中国的古代，一个人能真正的被称为君子，说明这个人的思想以及道德品格都是非常端正的，但是即使是这样的人，他也还是爱财的，就和美一样（<strong>爱美之心，人皆有之</strong>），金钱就是生活中不可缺少的一种美的存在。君子虽然爱财，但是取之有道。所谓的取之有道就是说，君子获取钱财的途径是正规的、合法的，是通过自己的努力和劳动赚取的。</p><p>这样的君子是我们的榜样，无论是古代还是现代，我们都应该提倡通过合法的途径和方式去获取钱财，不要做那些钻营取巧（<strong>不合法</strong>）的勾当。</p><h3 id="为富不仁？"><a href="#为富不仁？" class="headerlink" title="为富不仁？"></a>为富不仁？</h3><p>中国还有一句古话是说：<strong>达则兼济天下，穷则独善其身</strong></p><p>前不久的互联网大会上，京东的老总刘强东就发表了一席关于这方面讲话。大概意思就是说，我们当今社会下的中国富人，大多为富不仁，集聚财富的手段和途径也有可能存在灰暗地带，而且也并没有响应国家的号召“<strong>让一部分人先富起来，然后带动其他人也富起来</strong>”。</p><p>当然，这些话是说给其他的互联网金融地产大佬们听的，我们这些平常百姓是兼济不了天下了，我们唯一能做的就是独善其身的同时等待着什么时候能称谓被兼济到的一员。</p><p>物质生活的匮乏不仅仅会束缚我们的想象力，更有可能让我们陷入金钱的桎梏。当一个人的生活是以金钱为导向的时候，那么他的生活也就丧失了乐趣和活力。</p><h3 id="金钱带来烦恼？"><a href="#金钱带来烦恼？" class="headerlink" title="金钱带来烦恼？"></a>金钱带来烦恼？</h3><p>我身边就有这样的例子，W是我的一个女同事，她30不到的年龄都已经有了10多年的工作经验，读书时代都开始了打工赚取自己人生的第一桶金，如今不仅在老家买了房和车，还有了自己的家庭和孩子，本来是要算计着早早退休过逍遥的生活呢，奈何养老钱没挣够，这又出来打工了。</p><p>她给我讲了很多关于她早些年如何积聚财富的事情，开过餐馆，做过老师，买过服装，开过培训机构，干过测试，还曾是产品经理，混迹过娱乐圈，也在金融行业摸打滚爬过，可谓是人生阅历和经验相当之丰富。她自己之言现在车房娃都有了，但是由于养老的钱还不够，所以又出来工作了。</p><p>当时她给我的印象是：<strong>牛逼的人生，不需要解释</strong>。</p><p>直到后来再一次团队聚餐的时候，她走在路上和我们说，她被他的老同学看不起的事情，她说她的那些老同学（闺蜜），每次和她一起上街就会说她，也不换个苹果手机，拿着小米屌丝机寒碜得慌，还向她炫耀新买的包包之类的。她说她很烦恼，简直不知道该怎么面对自己和朋友，感觉自己过得很失败，身材从生完小孩就一直胖的没型（确实很胖哦），也没有买过什么化妆品（皮肤天生的挺好的），她自己觉得自己这几年越活越悲惨了。</p><p>其他女同事还劝解她不要把这种事情放在心上，走自己的路，让别人说去就好了。可是过没几天，她就买了一部新出的iPhone X，而且是沟通非官方途径购买的，花费了10000多RMB，她拿着新手机给我们看时，我们每个人都露出了羡慕的目光，她自己却长舒一口气说，到底还是买了，看她们还说我土鳖。</p><p>当时我听了这话就想，她还是没能做到<strong>走自己的路，让别人说去吧</strong>。</p><p>有时候，我们生活中的牢笼不是别人带来的，而是因为自己的太过在意别人的眼光。</p><p>其实这件事情并不是重点，重点是要说这位W对于金钱的态度，她其实应该算是挺有钱的人了，而且生钱有道，还投资过上文提到的比特币，当然是卖早了，没有赶上这个风口，要不然就该辞职回家养老了。</p><p>每次我去找她协同工作，她都会和我讲一些她的生钱之道，比如多办几张信用卡，再去淘宝买个POS机，通过POS机，把信用卡的额度刷到自己的储蓄卡中，然后用这些钱买理财产品，月底到期，体现还信用卡，然后赚取理财的利息。她还讲了很多如何计算时间和期限，如何计算利润率，下载哪个App好用，哪个网站的年化利率高……</p><p>听得我一愣一愣的，一旁的测试小妹我面面相觑，感觉自己这20多年白活了。她说他靠这种方式每个月能有2000多的利息入账，在北京的房租就到手了。还说买的新手机iPhone X就是用的这些钱买的。</p><h3 id="累并快乐着？"><a href="#累并快乐着？" class="headerlink" title="累并快乐着？"></a>累并快乐着？</h3><p>好吧，我承认，她确实很厉害，很有头脑，很会钻空子（她自己说的，这是信用卡和金融机构的空子，因为她在金融行业干过，所以她知道），很会赚钱。但是如果让我这样做的话，我肯定无法接受，不仅仅是因为我不精于算计，没有相关方面的头脑和知识，更多的是，我不想把自己的生活搞得太累太复杂。</p><p>以她自己的说法就是，每天都要关注着这些理财的动向和趋势，要去计算去预估，不能忘了什么时候出手，什么时候体现，等等。如果每天都要做这些事情，拿着手机看仪表盘，算计着各种率过日子，我想我一定过不来，所以我只能踏踏实实的老老实实的做工作，拿工资。</p><p>又一次她和我讲做测试很挣钱，让我考虑转行，我说没有这方面的兴趣，我还是喜欢做开发。她说我对于金钱的渴望不够强烈。我笑而不语。</p><p>就是这一刻，我对她又有了新的认识，关于她的金钱观，让我发自内心的反省自我。好在我还没有向她那样，把兴趣爱好，工作职业都以金钱为目的和导向。</p><h3 id="做你喜欢的事情，不仅仅是为了金钱"><a href="#做你喜欢的事情，不仅仅是为了金钱" class="headerlink" title="做你喜欢的事情，不仅仅是为了金钱"></a>做你喜欢的事情，不仅仅是为了金钱</h3><p><strong>做你喜欢做的，把兴趣当成自己的职业才是最幸福的。</strong>这又是一个简单而朴素的大道理。也许我没能成为最幸福的，但是我一定不要沦为金钱的奴隶，最那个最不幸的人。</p><p>可能有人会说我这就是彻头彻尾的没有被逼到那个地步，所以感觉没有那种对于金钱的迫切需要，所以可以高枕无忧的做自己喜欢的工作。我想或许是的，但是我想说的是，既然生活没有那么紧张，干嘛非要把自己逼到那种地步呢。</p><p>最后想我说：<strong>做自己喜欢的事，钱那么多，永远挣不完的</strong>。</p>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> think </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/12/08/hello-world/"/>
      <url>/2017/12/08/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
